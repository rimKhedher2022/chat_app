{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\MesProjets\\\\msg\\\\src\\\\context\\\\AuthContext.js\",\n    _s = $RefreshSig$();\n\nimport { onAuthStateChanged } from \"firebase/auth\";\nimport { createContext, useEffect, useState } from \"react\";\nimport { auth } from \"../firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext(); //Context Api :\n// to access the user logged in \n// Chaque objet Context est livré avec un composant Provider React qui permet aux\n// composants consommateurs de s'abonner aux changements de contexte.\n\nexport const AuthContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [currentUser, setCurrentUser] = useState({}); // setCurrentUser to update the user \n  //   In most scenarios using Authentication, \n  //   you will want to know whether your users are currently \n  //   signed-in or signed-out of your application. \n  //   The module provides a method called onAuthStateChanged \n  //   which allows you to subscribe to the users current \n  //   authentication state, and receive an event whenever that state changes.\n\n  useEffect(() => {\n    const unsub = onAuthStateChanged(auth, user => {\n      setCurrentUser(user);\n      console.log(user);\n    });\n    return () => {\n      unsub();\n    };\n  }, []); // the component (children) can reach current user\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: currentUser,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n}; // children = the component\n\n_s(AuthContextProvider, \"a1VAF6gx3xMPPUGx4/LcKULIT+c=\");\n\n_c = AuthContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/MesProjets/msg/src/context/AuthContext.js"],"names":["onAuthStateChanged","createContext","useEffect","useState","auth","AuthContext","AuthContextProvider","children","currentUser","setCurrentUser","unsub","user","console","log"],"mappings":";;;AAAA,SAASA,kBAAT,QAAmC,eAAnC;AACA,SAASC,aAAT,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAAQC,IAAR,QAAmB,aAAnB;;AAEA,OAAO,MAAMC,WAAW,gBAAGJ,aAAa,EAAjC,C,CACP;AACA;AAGA;AACA;;AAEA,OAAO,MAAMK,mBAAmB,GAAG,QAAe;AAAA;;AAAA,MAAd;AAACC,IAAAA;AAAD,GAAc;AAEhD,QAAM,CAACC,WAAD,EAAaC,cAAb,IAA+BN,QAAQ,CAAC,EAAD,CAA7C,CAFgD,CAEE;AAGpD;AACA;AACA;AACA;AACA;AACA;;AAGAD,EAAAA,SAAS,CAAC,MAAI;AACX,UAAMQ,KAAK,GAAGV,kBAAkB,CAACI,IAAD,EAAOO,IAAD,IAAS;AAC1CF,MAAAA,cAAc,CAACE,IAAD,CAAd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACH,KAH8B,CAAhC;AAKH,WAAO,MAAK;AACTD,MAAAA,KAAK;AACP,KAFD;AAIC,GAVQ,EAUP,EAVO,CAAT,CAbkD,CAyBlD;;AAEQ,sBAEA,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEF,WAA7B;AAAA,cACKD;AADL;AAAA;AAAA;AAAA;AAAA,UAFA;AAOP,CAlCM,C,CAkCJ;;GAlCUD,mB;;KAAAA,mB","sourcesContent":["import { onAuthStateChanged } from \"firebase/auth\";\r\nimport { createContext, useEffect, useState } from \"react\";\r\nimport {auth} from \"../firebase\"\r\n\r\nexport const AuthContext = createContext()\r\n//Context Api :\r\n// to access the user logged in \r\n\r\n\r\n// Chaque objet Context est livré avec un composant Provider React qui permet aux\r\n// composants consommateurs de s'abonner aux changements de contexte.\r\n\r\nexport const AuthContextProvider = ({children}) =>{\r\n\r\n  const [currentUser,setCurrentUser] = useState({}) // setCurrentUser to update the user \r\n\r\n\r\n//   In most scenarios using Authentication, \r\n//   you will want to know whether your users are currently \r\n//   signed-in or signed-out of your application. \r\n//   The module provides a method called onAuthStateChanged \r\n//   which allows you to subscribe to the users current \r\n//   authentication state, and receive an event whenever that state changes.\r\n\r\n\r\nuseEffect(()=>{\r\n   const unsub = onAuthStateChanged(auth,(user) =>{\r\n        setCurrentUser(user);\r\n        console.log(user)\r\n    });\r\n\r\nreturn () =>{\r\n   unsub();\r\n};\r\n\r\n},[]);\r\n\r\n// the component (children) can reach current user\r\n\r\n        return (\r\n\r\n        <AuthContext.Provider value={currentUser}>\r\n            {children}\r\n        </ AuthContext.Provider>\r\n        );\r\n\r\n}; // children = the component"]},"metadata":{},"sourceType":"module"}